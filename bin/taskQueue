#!/usr/bin/env php
<?php
require_once(getenv('COLLECTIVEACCESS_HOME') . '/setup.php');

$sleep = getenv('WORKER_JOB_SLEEP_TIME') ?: 1;
$sleep = $sleep * 1000000;

$maximum_time = getenv('WORKER_QUEUE_MAXIMUM_TIME') ?: 60; // default to 60 minutes
$maximum_time = $maximum_time * 60; // convert minutes to seconds
$start_time = time();

$queue = new TaskQueue();

// We are starting the queue, so no current process should exist
$o_appvars = new ApplicationVars();
$o_appvars->setVar("taskqueue_processes", []);
$o_appvars->save();

$queue->resetUnfinishedTasks();

while (true) {
    $queue->processQueue();        // Process queued tasks
    $incompatibleDefinitions = [
        '__CA_DONT_DO_HIERARCHICAL_INDEXING__',
        '__CA_DONT_DO_SEARCH_INDEXING__',
        '__CA_DONT_QUEUE_SEARCH_INDEXING__',
        '__CA_DONT_LOG_CHANGES__'];
    foreach ($incompatibleDefinitions as $definition) {
        if (defined($definition)) {
            CLIUtils::addMessage(_t('The constant %s is defined. Exiting task queue so it can restart cleanly and we can prceed with further tasks.', $definition));
            exit(0);
        }
    }
    $queue->runPeriodicTasks();    // Process recurring tasks implemented in plugins
    // Check the elapsed time
    $elapsed_time = time() - $start_time;
    if ($elapsed_time >= $maximum_time) {
        CLIUtils::addMessage(_t('Maximum queue processing time reached. Exiting.'));
        exit(0);
    }
    usleep($sleep);

}
