#!/usr/bin/env php
<?php

use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Exception\InvalidArgumentException;

require_once getenv('COLLECTIVEACCESS_HOME') . '/setup.php';
require_once dirname(__DIR__, 3) . '/autoload.php';
const ARG_TABLE = 'table';
const OPT_LIMIT = 'limit';
const OPT_OFFSET = 'offset';
/**
 * Rebuild search index values for records from a table.
 *
 * Adapted from @see SearchIndexer::reindexRows()
 * @param SearchIndexer $indexer
 * @param Db $db
 * @param string $table
 * @param array $ids
 * @param BaseModel $instance
 * @param InputInterface $input
 * @param OutputInterface $output
 * @param array|null $options
 * @return true|null
 * @throws Exception
 */
function reindexRows(SearchIndexer   $indexer,
                     Db              $db,
                     string          $table,
                     array           $ids,
                     BaseModel       $instance,
                     InputInterface  $input,
                     OutputInterface $output,
                     array           $options = null)
{
    if (!is_array($ids) && !sizeof($ids)) {
        return null;
    }
    /* Constant that means that only the target ids will be indexed, not records relating to those records*/
    define('__CollectiveAccess_IS_REINDEXING__', 1);

    $elementIds = null;
    if (method_exists($instance, "getApplicableElementCodes")) {
        $elementIds = array_keys($instance->getApplicableElementCodes(null, false, false));
    }

    $tableName = $instance->tableName();
    $tableNum = $instance->tableNum();
    $primaryKey = $instance->primaryKey();
    $fieldData = [];

    /** @var array $intrinsicList */
    $intrinsicList = $indexer->getFieldsToIndex($tableName, $tableName, ['intrinsicOnly' => true]);
    $intrinsicList[$primaryKey] = [];
    $limit = count($ids);
    $progress = new ProgressBar($output, $limit ?? 1);
    $stats = [];

    if ($elementIds) {    // Pre-load attribute values for items to index; improves index performance
        $output->writeln('Prefetching values');
        ca_attributes::prefetchAttributes($db, $tableNum, $ids, $elementIds);
        /** @var DbResult $fieldData */
        $fieldDataResource = $db->query("SELECT " . join(", ", array_keys($intrinsicList)) . " FROM {$tableName} WHERE {$primaryKey} IN (?)", [$ids]);

        $fieldData = [];
        while ($fieldDataResource->nextRow()) {
            $fieldData[(int)$fieldDataResource->get($primaryKey)] = $fieldDataResource->getRow();
        }
        $output->writeln('Finished prefetching values');
    }
    foreach ($ids as $i => $id) {
        $ret = $indexer->indexRow($tableNum, $id, $fieldData[$id], true);
        $stats[$ret] ++;
        $progress->advance();
    }
    return $stats;
}
(new SingleCommandApplication())
    ->setName('Reindex records from table')
    ->setDescription('Indexes a portion of records from a table.')
    ->addArgument(ARG_TABLE, InputArgument::REQUIRED, "Specify the table that you want to index")
    ->addOption(OPT_LIMIT, 'l', InputOption::VALUE_OPTIONAL, 'The number of records that you want to index', 1000)
    ->addOption(OPT_OFFSET, 'o', InputOption::VALUE_OPTIONAL, 'The offset to set for records you want to index', 0)
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $table = $input->getArgument(ARG_TABLE);
        $limit = (int)$input->getOption(OPT_LIMIT);
        $offset = (int)$input->getOption(OPT_OFFSET);
        if (!Datamodel::tableExists($table)){
            throw new InvalidArgumentException('Table does not exist');
        };
        
        $instance = Datamodel::getInstance($table);
        $db = new Db();
        $sql = "SELECT ".$instance->primaryKey()." FROM {$table}".($instance->hasField('deleted') ? " WHERE deleted = 0" : "");
        $args = [];
        if ($limit) {
            $sql = "$sql LIMIT ?";
            $args[] = $limit;
            if ($offset) {
                $sql = "$sql OFFSET ?";
                $args[] = $offset;
            }
        }
        $res = $db->query($sql, $args);
        $ids = $res->getAllFieldValues($instance->primaryKey());
        $indexer = new SearchIndexer($db);
        $n = count($ids);
        if ($n) {
            $output->writeln("Starting to index $n records from table $table with offset $offset");
            $success = reindexRows($indexer,$db, $table, $ids, $instance, $input, $output);
            if ($success) {
                $output->writeln("Indexed $n records from table $table");
            } else {
                throw new Exception('Failed to index rows');
            }
        } else {
            $output->writeln("<warn>There are no records in <strong>$table</strong></warn>");
        }


    })
    ->run();
